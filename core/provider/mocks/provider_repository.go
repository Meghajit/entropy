// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	provider "github.com/odpf/entropy/core/provider"
	mock "github.com/stretchr/testify/mock"
)

// ProviderRepository is an autogenerated mock type for the Repository type
type ProviderRepository struct {
	mock.Mock
}

type ProviderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ProviderRepository) EXPECT() *ProviderRepository_Expecter {
	return &ProviderRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, r
func (_m *ProviderRepository) Create(ctx context.Context, r provider.Provider) error {
	ret := _m.Called(ctx, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, provider.Provider) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProviderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ProviderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - ctx context.Context
//  - r provider.Provider
func (_e *ProviderRepository_Expecter) Create(ctx interface{}, r interface{}) *ProviderRepository_Create_Call {
	return &ProviderRepository_Create_Call{Call: _e.mock.On("Create", ctx, r)}
}

func (_c *ProviderRepository_Create_Call) Run(run func(ctx context.Context, r provider.Provider)) *ProviderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(provider.Provider))
	})
	return _c
}

func (_c *ProviderRepository_Create_Call) Return(_a0 error) *ProviderRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetByURN provides a mock function with given fields: ctx, urn
func (_m *ProviderRepository) GetByURN(ctx context.Context, urn string) (*provider.Provider, error) {
	ret := _m.Called(ctx, urn)

	var r0 *provider.Provider
	if rf, ok := ret.Get(0).(func(context.Context, string) *provider.Provider); ok {
		r0 = rf(ctx, urn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, urn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderRepository_GetByURN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByURN'
type ProviderRepository_GetByURN_Call struct {
	*mock.Call
}

// GetByURN is a helper method to define mock.On call
//  - ctx context.Context
//  - urn string
func (_e *ProviderRepository_Expecter) GetByURN(ctx interface{}, urn interface{}) *ProviderRepository_GetByURN_Call {
	return &ProviderRepository_GetByURN_Call{Call: _e.mock.On("GetByURN", ctx, urn)}
}

func (_c *ProviderRepository_GetByURN_Call) Run(run func(ctx context.Context, urn string)) *ProviderRepository_GetByURN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProviderRepository_GetByURN_Call) Return(_a0 *provider.Provider, _a1 error) *ProviderRepository_GetByURN_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *ProviderRepository) List(ctx context.Context, filter map[string]string) ([]*provider.Provider, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*provider.Provider
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) []*provider.Provider); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*provider.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ProviderRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - ctx context.Context
//  - filter map[string]string
func (_e *ProviderRepository_Expecter) List(ctx interface{}, filter interface{}) *ProviderRepository_List_Call {
	return &ProviderRepository_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *ProviderRepository_List_Call) Run(run func(ctx context.Context, filter map[string]string)) *ProviderRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]string))
	})
	return _c
}

func (_c *ProviderRepository_List_Call) Return(_a0 []*provider.Provider, _a1 error) *ProviderRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Migrate provides a mock function with given fields: ctx
func (_m *ProviderRepository) Migrate(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProviderRepository_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type ProviderRepository_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
//  - ctx context.Context
func (_e *ProviderRepository_Expecter) Migrate(ctx interface{}) *ProviderRepository_Migrate_Call {
	return &ProviderRepository_Migrate_Call{Call: _e.mock.On("Migrate", ctx)}
}

func (_c *ProviderRepository_Migrate_Call) Run(run func(ctx context.Context)) *ProviderRepository_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ProviderRepository_Migrate_Call) Return(_a0 error) *ProviderRepository_Migrate_Call {
	_c.Call.Return(_a0)
	return _c
}
